{"version":3,"file":"static/js/395.6f056328.chunk.js","mappings":"8RAqFA,UA9DkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAExBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAK1B,GAAwBC,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACRV,GAASW,EAAAA,EAAAA,GAAY,CAAEH,KAAMA,EAAMI,SAJrB,IAKf,GAAE,CAACZ,EAAUQ,IAOd,OACE,SAAC,IAAD,WACE,UAAC,IAAD,YACE,SAAC,IAAD,yBAEA,gCACGN,GAAaA,EAAUW,OAAS,GAC/B,SAAC,IAAD,UACGX,EAAUY,KAAI,SAAAC,GAAS,IAAD,MACrB,OACE,yBACE,SAAC,IAAD,CACEC,SAAS,WACTC,GAAIF,EAAKG,IACTC,IAAG,UAAEJ,EAAKK,eAAP,QAAkBD,EACrBE,MAAK,UAAEN,EAAKM,aAAP,QAAgB,UACrBC,MAAM,oCAAOP,EAAKQ,mBAAZ,QAA2B,mBACjCC,KAAMT,EAAKS,KAAL,UAAeT,EAAKS,KAApB,QAAiC,MAPlCT,EAAKG,IAWjB,OAGH,SAAC,IAAD,CACEF,SAAS,WACTM,KAAK,yDAGRpB,GAAaA,EAAUW,OAAS,IAC/B,SAAC,IAAD,CACEY,MAAOC,KAAKC,KAAKtB,EA3Cb,GA4CJG,KAAMA,EACNoB,aAtCS,SAACC,EAAOC,GAC3BrB,EAAQqB,IACRC,EAAAA,EAAAA,IACD,WA0CF,C","sources":["pages/Favorites.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectFavoriteRecipes,\n  // selectIsLoading,\n  selectTotalFavoriteRecipes,\n} from 'redux/recipes/selectors';\n\nimport { getFavorite } from '../redux/recipes/favoritesOperations';\nimport { PaginationComp } from 'components/Pagination/Pagination';\n\nimport { RecipeItem } from 'components/Recipe/RecipeItem';\nimport { ContentWrapper, Wrapper } from 'components/Favorites/Favorites.styled';\nimport { Container } from 'components/Container/Container';\nimport { Title } from 'components/Title/Title';\n// import { Loader } from 'components/Loader/Loader';\nimport { EmptyPagePlug } from 'components/EmptyPagePlug/EmptyPagePlug';\n\nimport { onScrollUp } from 'utils/scrollUp';\n\nimport img from '../images/default.jpg';\n\nconst Favorites = () => {\n  const dispatch = useDispatch();\n  const favorites = useSelector(selectFavoriteRecipes);\n\n  const total = useSelector(selectTotalFavoriteRecipes);\n\n  // const isLoading = useSelector(selectIsLoading);\n\n  const perPage = 4;\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    dispatch(getFavorite({ page: page, per_page: perPage }));\n  }, [dispatch, page]);\n\n  const handleChange = (event, value) => {\n    setPage(value);\n    onScrollUp();\n  };\n\n  return (\n    <Wrapper>\n      <Container>\n        <Title>Favorites</Title>\n\n        <>\n          {favorites && favorites.length > 0 ? (\n            <ContentWrapper>\n              {favorites.map(item => {\n                return (\n                  <li key={item._id}>\n                    <RecipeItem\n                      location=\"favorite\"\n                      id={item._id}\n                      img={item.preview ?? img}\n                      title={item.title ?? 'No name'}\n                      text={<span>{item.description ?? 'No description'}</span>}\n                      time={item.time ? `${item.time} min` : ''}\n                    />\n                  </li>\n                );\n              })}\n            </ContentWrapper>\n          ) : (\n            <EmptyPagePlug\n              location=\"favorite\"\n              text=\"You currently don't have any favorite recipes added.\"\n            />\n          )}\n          {favorites && favorites.length > 0 && (\n            <PaginationComp\n              count={Math.ceil(total / perPage)}\n              page={page}\n              handleChange={handleChange}\n            />\n          )}\n        </>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default Favorites;\n"],"names":["dispatch","useDispatch","favorites","useSelector","selectFavoriteRecipes","total","selectTotalFavoriteRecipes","useState","page","setPage","useEffect","getFavorite","per_page","length","map","item","location","id","_id","img","preview","title","text","description","time","count","Math","ceil","handleChange","event","value","onScrollUp"],"sourceRoot":""}