{"version":3,"file":"static/js/192.dbd219b1.chunk.js","mappings":"wSAwFA,UAhEkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MAEXC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAEtBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAEpBC,GAAaJ,EAAAA,EAAAA,IAAYK,EAAAA,IAE/B,GAAwBC,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACRZ,GAASa,EAAAA,EAAAA,GAAc,CAAEH,KAAMA,EAAMI,SAJvB,IAKf,GAAE,CAACd,EAAUU,IAOd,OACE,SAAC,IAAD,WACE,UAAC,IAAD,YACE,SAAC,IAAD,yBACCH,GACC,SAAC,IAAD,KAEA,gCACGL,GAAWA,EAAQa,OAAS,GAC3B,SAAC,IAAD,UACGb,EAAQc,KAAI,SAAAC,GAAS,IAAD,MACnB,OACE,yBACE,SAAC,IAAD,CACEC,SAAS,UACTC,GAAIF,EAAKG,IACTC,IAAG,UAAEJ,EAAKK,eAAP,QAAkBD,EACrBE,MAAK,UAAEN,EAAKM,aAAP,QAAgB,UACrBC,MACE,oCAAOP,EAAKQ,mBAAZ,QAA2B,mBAE7BC,KAAMT,EAAKS,KAAL,UAAeT,EAAKS,KAApB,QAAiC,MATlCT,EAAKG,IAajB,OAGH,SAAC,IAAD,CAAeI,KAAK,oEAErBtB,GAAWA,EAAQa,OAAS,IAC3B,SAAC,IAAD,CACEY,MAAOC,KAAKC,KAAKxB,EA5Cf,GA6CFK,KAAMA,EACNoB,aAvCO,SAACC,EAAOC,GAC3BrB,EAAQqB,IACRC,EAAAA,EAAAA,IACD,WA4CF,C","sources":["pages/MyRecipes.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectOwnRecipes,\n  selectIsLoading,\n  selectOwnTotalRecipes,\n} from 'redux/recipes/selectors';\nimport { getOwnRecipes } from 'redux/recipes/ownRecipesOperations';\n\nimport { PaginationComp } from 'components/Pagination/Pagination';\n\nimport { RecipeItem } from '../components/Recipe/RecipeItem';\nimport {\n  ContentWrapper,\n  Wrapper,\n} from '../components/Favorites/Favorites.styled';\nimport { Container } from 'components/Container/Container';\nimport { Title } from '../components/Title/Title';\nimport { Loader } from 'components/Loader/Loader';\nimport { EmptyPagePlug } from 'components/EmptyPagePlug/EmptyPagePlug';\n\nimport { onScrollUp } from 'utils/scrollUp';\nimport img from '../images/default.jpg';\n\nconst MyRecipes = () => {\n  const dispatch = useDispatch();\n\n  const recipes = useSelector(selectOwnRecipes);\n\n  const total = useSelector(selectOwnTotalRecipes);\n\n  const isFetching = useSelector(selectIsLoading);\n  const perPage = 4;\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    dispatch(getOwnRecipes({ page: page, per_page: perPage }));\n  }, [dispatch, page]);\n\n  const handleChange = (event, value) => {\n    setPage(value);\n    onScrollUp();\n  };\n\n  return (\n    <Wrapper>\n      <Container>\n        <Title>My recipes</Title>\n        {isFetching ? (\n          <Loader />\n        ) : (\n          <>\n            {recipes && recipes.length > 0 ? (\n              <ContentWrapper>\n                {recipes.map(item => {\n                  return (\n                    <li key={item._id}>\n                      <RecipeItem\n                        location=\"recipes\"\n                        id={item._id}\n                        img={item.preview ?? img}\n                        title={item.title ?? 'No name'}\n                        text={\n                          <span>{item.description ?? 'No description'}</span>\n                        }\n                        time={item.time ? `${item.time} min` : ''}\n                      />\n                    </li>\n                  );\n                })}\n              </ContentWrapper>\n            ) : (\n              <EmptyPagePlug text=\"You currently don't have any own recipes added. Let's add some!\" />\n            )}\n            {recipes && recipes.length > 0 && (\n              <PaginationComp\n                count={Math.ceil(total / perPage)}\n                page={page}\n                handleChange={handleChange}\n              />\n            )}\n          </>\n        )}\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default MyRecipes;\n"],"names":["dispatch","useDispatch","recipes","useSelector","selectOwnRecipes","total","selectOwnTotalRecipes","isFetching","selectIsLoading","useState","page","setPage","useEffect","getOwnRecipes","per_page","length","map","item","location","id","_id","img","preview","title","text","description","time","count","Math","ceil","handleChange","event","value","onScrollUp"],"sourceRoot":""}