{"version":3,"file":"static/js/192.21daf57e.chunk.js","mappings":"8RAwFA,UAhEkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MAEXC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAEtBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAM1B,GAAwBC,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACRV,GAASW,EAAAA,EAAAA,GAAc,CAAEH,KAAMA,EAAMI,SALvB,IAMf,GAAE,CAACZ,EAAUQ,IAOd,OACE,SAAC,IAAD,WACE,UAAC,IAAD,YACE,SAAC,IAAD,0BAEA,gCACGN,GAAWA,EAAQW,OAAS,GAC3B,SAAC,IAAD,UACGX,EAAQY,KAAI,SAAAC,GAAS,IAAD,MACnB,OACE,yBACE,SAAC,IAAD,CACEC,SAAS,UACTC,GAAIF,EAAKG,IACTC,IAAG,UAAEJ,EAAKK,eAAP,QAAkBD,EACrBE,MAAK,UAAEN,EAAKM,aAAP,QAAgB,UACrBC,MAAM,oCAAOP,EAAKQ,mBAAZ,QAA2B,mBACjCC,KAAMT,EAAKS,KAAL,UAAeT,EAAKS,KAApB,QAAiC,MAPlCT,EAAKG,IAWjB,OAGH,SAAC,IAAD,CACEF,SAAS,UACTM,KAAK,oEAGRpB,GAAWA,EAAQW,OAAS,IAC3B,SAAC,IAAD,CACEY,MAAOC,KAAKC,KAAKtB,EA5Cb,GA6CJG,KAAMA,EACNoB,aAtCS,SAACC,EAAOC,GAC3BrB,EAAQqB,IACRC,EAAAA,EAAAA,IACD,WA0CF,C","sources":["pages/MyRecipes.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectOwnRecipes,\n  // selectIsLoading,\n  selectOwnTotalRecipes,\n} from 'redux/recipes/selectors';\nimport { getOwnRecipes } from 'redux/recipes/ownRecipesOperations';\n\nimport { PaginationComp } from 'components/Pagination/Pagination';\n\nimport { RecipeItem } from '../components/Recipe/RecipeItem';\nimport {\n  ContentWrapper,\n  Wrapper,\n} from '../components/Favorites/Favorites.styled';\nimport { Container } from 'components/Container/Container';\nimport { Title } from '../components/Title/Title';\n// import { Loader } from 'components/Loader/Loader';\nimport { EmptyPagePlug } from 'components/EmptyPagePlug/EmptyPagePlug';\n\nimport { onScrollUp } from 'utils/scrollUp';\nimport img from '../images/default.jpg';\n\nconst MyRecipes = () => {\n  const dispatch = useDispatch();\n\n  const recipes = useSelector(selectOwnRecipes);\n\n  const total = useSelector(selectOwnTotalRecipes);\n\n  // const isLoading = useSelector(selectIsLoading);\n\n  const perPage = 4;\n\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    dispatch(getOwnRecipes({ page: page, per_page: perPage }));\n  }, [dispatch, page]);\n\n  const handleChange = (event, value) => {\n    setPage(value);\n    onScrollUp();\n  };\n\n  return (\n    <Wrapper>\n      <Container>\n        <Title>My recipes</Title>\n\n        <>\n          {recipes && recipes.length > 0 ? (\n            <ContentWrapper>\n              {recipes.map(item => {\n                return (\n                  <li key={item._id}>\n                    <RecipeItem\n                      location=\"recipes\"\n                      id={item._id}\n                      img={item.preview ?? img}\n                      title={item.title ?? 'No name'}\n                      text={<span>{item.description ?? 'No description'}</span>}\n                      time={item.time ? `${item.time} min` : ''}\n                    />\n                  </li>\n                );\n              })}\n            </ContentWrapper>\n          ) : (\n            <EmptyPagePlug\n              location=\"recipes\"\n              text=\"You currently don't have any own recipes added. Let's add some!\"\n            />\n          )}\n          {recipes && recipes.length > 0 && (\n            <PaginationComp\n              count={Math.ceil(total / perPage)}\n              page={page}\n              handleChange={handleChange}\n            />\n          )}\n        </>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default MyRecipes;\n"],"names":["dispatch","useDispatch","recipes","useSelector","selectOwnRecipes","total","selectOwnTotalRecipes","useState","page","setPage","useEffect","getOwnRecipes","per_page","length","map","item","location","id","_id","img","preview","title","text","description","time","count","Math","ceil","handleChange","event","value","onScrollUp"],"sourceRoot":""}